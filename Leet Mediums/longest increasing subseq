/*
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
*/

class Solution {
    public int lengthOfLIS(int[] nums) {
        return dynamicLIS(nums);
    }
    
    public int dynamicLIS(int[] nums){
        
        int[] lis = new int[nums.length];
        Arrays.fill(lis, 1);
        int max = 1;
        
        for(int i=1; i<nums.length; i++){
            for(int j=i-1; j>=0; j--){
                if(nums[j]<nums[i])
                    lis[i] = Math.max(lis[i], lis[j]+1);
                    max = Math.max(max, lis[i]);
            }
        }
        return max;
    }
    
    
    public int bruteForce(int[] nums, int prev, int index){
        if(index == nums.length) return 0;
        
        int take = 0, dontake = 0;
        if(nums[index]>prev){
            take = 1+bruteForce(nums, nums[index], index+1);
        }
        
        dontake = bruteForce(nums, prev, index+1);
        
        return Math.max(take, dontake);
    }
}
