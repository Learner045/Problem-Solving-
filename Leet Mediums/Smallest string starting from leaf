/*
Input: [0,1,2,3,4,3,4]
Output: "dba"
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    String smallest;
    
    public String smallestFromLeaf(TreeNode root) {
        if(root == null)return "";
        
        StringBuilder x = new StringBuilder();
        for(int i=0; i<26; i++)x.append('z');
        
        smallest =  x.toString();
        
        smallest(root, new StringBuilder());
        
        StringBuilder st = new StringBuilder(smallest);
      //  return st.reverse().toString();
        return smallest;
    }
    
    public void smallest(TreeNode root, StringBuilder sb){
        //System.out.println(sb);
        if(root.left == null && root.right == null){
             sb.insert(0, (char)('a'+root.val));
            if(!sb.equals("")){
                if(this.smallest.compareTo(sb.toString()) >0){
                    this.smallest = sb.toString();
                }else if(this.smallest.compareTo(sb.toString()) == 0){
                    this.smallest = sb.length()< this.smallest.length()?sb.toString():smallest;
                }
            }
            sb.deleteCharAt(0);
            return;
        }
        
        sb.insert(0, (char)('a'+root.val));
        
        if(root.left!=null)
        smallest(root.left, sb);
        
        if(root.right!=null)
        smallest(root.right, sb);
        
        sb.deleteCharAt(0);
        
        
    }
}
