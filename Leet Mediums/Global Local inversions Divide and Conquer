/*
Input: A = [1,2,0]
Output: false
Explanation: There are 2 global inversions, and 1 local inversion.
*/

class Solution {
    int LC = 0;
    int GL = 0;
    
    public boolean isIdealPermutation(int[] A) {
        
        for(int i=0; i+1<A.length; i++){
            if(A[i]>A[i+1])LC++;
        }
        
        solve(A, 0, A.length-1);
       System.out.println(LC+" "+GL);
        return GL==LC?true:false;
        
    }
    public List<Integer> solve(int[] A, int low, int high){  
        if(low == high){
            List<Integer> list = new ArrayList<>();
            list.add(A[low]);
            return list;
        }
        
        int mid = low+(high-low)/2;
        List<Integer> sorted1 = solve(A, low, mid);
        List<Integer> sorted2 = solve(A, mid+1, high);
        
        List<Integer> sorted = new ArrayList<>();
        int i=0, j=0;
    
        while(i<sorted1.size() && j<sorted2.size()){
       
            if(sorted1.get(i)<sorted2.get(j)){
                sorted.add(sorted1.get(i));
                i++;
            }else{
                this.GL+= (sorted1.size()-i);
                 sorted.add(sorted2.get(j));
                j++;
            }
        }
        while(i<sorted1.size()){
            sorted.add(sorted1.get(i));
            i++;
        }
        
        while(j<sorted2.size()){
            sorted.add(sorted2.get(j));
            j++;
        }
        return sorted;
    }
}
