/*
Input: lo = 7, hi = 11, k = 4
Output: 7
Explanation: The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].
The interval sorted by power is [8, 10, 11, 7, 9].
The fourth number in the sorted array is 7.
*/

class Solution {
    
    
    List<Pair<Integer, Integer>> list = new ArrayList<>();
    public int getKth(int lo, int hi, int k) {
        
        for(int i=lo; i<=hi; i++){
            int res = 0;
           if(i%2 == 0){
                res = getPowerOfEven(i);
           }else{
                res = getPowerOfOdd(i);
           }
            
           list.add(new Pair<Integer, Integer>(res, i));
            //power, number
        }
        
       // list.stream().forEach(System.out::println);
        
        Collections.sort(list, (a, b)-> Integer.compare(a.getKey(), b.getKey()));
        
        int count = k;
        int val = 0;
        for(Pair<Integer, Integer> pair: list){
            val = pair.getValue();
            count--;
            if(count == 0)return val;
        }
        return val;
        
    }
    
    public int getPowerOfOdd(int num){
        if(num == 1)return 1;
        num = 3*num+1;
        return 1+getPowerOfEven(num);
    }
    
    public int getPowerOfEven(int num){
       // System.out.println(num);
        int ans = getPower(num);
        if(ans>=0)return ans;
        
        num = num/2;
        
        if(num%2 == 0)
        return 1+ getPowerOfEven(num);
        else
            return 1+getPowerOfOdd(num);
    }
    
    public int getPower(int num){
        if(num == 1)return 1;
        //check if power of 2
        int res = num&(num-1);
        if(res == 0){
            //pow of 2
            return ((int) (Math.log(num) / Math.log(2)) );
        }
        return -1;
    }
    
    
}
