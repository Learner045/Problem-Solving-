class Solution {
    
    class Node{
        int freq;
        char c;
        public Node(char ch, int f){
            freq = f;
            c = ch;
        }
        public String getCharacters(){
            StringBuilder sb = new StringBuilder();
            for(int i=0; i<freq; i++)sb.append(c);
            return sb.toString();
        }

    }
    public String frequencySort(String s) {
        
        PriorityQueue<Node> queue = new PriorityQueue<>(new Comparator<Node>(){
            public int compare(Node a, Node b){
                return -Integer.compare(a.freq, b.freq);
            }
        });
        
        Map<Character, Node> map = new HashMap<>();
        
        for(int i=0; i<s.length(); i++){
            if( map.containsKey(s.charAt(i)) ){
                Node node = map.get(s.charAt(i));
                queue.remove(node);
                node.freq += 1;
                queue.add(node);
            }else{
                Node node = new Node(s.charAt(i), 1);
                map.put(s.charAt(i), node);
                queue.add(node);
            }
        }
        
        StringBuilder sb = new StringBuilder();
        while(!queue.isEmpty()){
            sb.append(queue.remove().getCharacters());
        }
        return sb.toString();
        
    }
}
