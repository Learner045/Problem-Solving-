/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<Integer, LinkedList<Integer>> map; //level- indexes
    public int widthOfBinaryTree(TreeNode root) {
        map = new HashMap<>();
    
        traverse(root, 0, 0);
        int max = 0;
        
        for(Map.Entry<Integer, LinkedList<Integer>> entry: map.entrySet()){
            int level = entry.getKey();
            LinkedList<Integer> indices = entry.getValue();
            max = Math.max(max, indices.getLast()-indices.getFirst()+1);
        }
        return max;
    }
    
    public void traverse(TreeNode root, int idx, int level){
        if(root == null)return;
        
        if(!map.containsKey(level)){
            LinkedList<Integer> indices = new LinkedList<>();
            indices.add(idx);
            map.put(level, indices);
        }else{
            LinkedList<Integer> indices = map.get(level);
            indices.add(idx);
            map.put(level, indices);
        }
        
        if(root.left!=null)
            traverse(root.left, 2*idx, level+1);
        if(root.right!=null)
            traverse(root.right, 2*idx+1, level+1);
    }
}
