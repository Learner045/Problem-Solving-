/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    int carry = 0;
    ListNode head;
    
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        head = new ListNode();
        
        int len1 = calcLength(l1);
        int len2 = calcLength(l2);
        
        ListNode new_l1 = null, new_l2 = null;
        if(len1>len2){
            new_l1 = traverseList(l1, len1-len2);
        }else{
            new_l2 = traverseList(l2, len2-len1);
        }
        
        add( (new_l1==null?l1:new_l1), (new_l2==null?l2:new_l2) );
        
        
        if(len1>len2){
            addRemaining(l1, new_l1);
        }else{
            addRemaining(l2, new_l2);
        }
        
        if(carry!=0)appendToHead(new ListNode(carry));
        return head.next;
    }
    
    public void addRemaining(ListNode l1, ListNode new_l1){
        if(l1 == new_l1)return;
        
        addRemaining(l1.next, new_l1);
        int sum = l1.val+carry;
        int dig = sum%10;
        carry = sum/10;
        
        appendToHead(new ListNode(dig));
        
    }
    
    public ListNode traverseList(ListNode curr, int count){
        while(count>0){
            curr = curr.next;
            count--;
        }
        return curr;
    }
    
    public void appendToHead(ListNode curr){
         if(head.next==null){
            head.next = curr;
        }else{
            ListNode next = head.next;
            head.next = curr;
            head.next.next=next;
        }
    }
    
    public int calcLength(ListNode curr){
        int count = 1;
        while(curr!=null){
            curr = curr.next;
            count++;
        }
        return count;
    }
    
    public void add(ListNode l1, ListNode l2){
        if(l1 == null && l2 == null)return ;
        
        add(l1.next, l2.next);
        int sum = l1.val+l2.val+carry;
        int dig = sum%10;
        carry = sum/10;
        
        appendToHead(new ListNode(dig));
       
        
    }
    
  
}
