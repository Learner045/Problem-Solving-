/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int[] pre;
    int[] in;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        this.pre = preorder;
        this.in = inorder;
        
        return BT(0, preorder.length-1, 0, inorder.length-1);
    }
    private int getIndex(int val){
        for(int i=0; i<in.length; i++){
            if(in[i] == val)return i;
        }
        return -1;
    }
    public TreeNode BT(int p_st, int p_end, int i_st, int i_end){
        if(p_st<0 || i_st < 0 || p_end<0 || i_end< 0)return null;
        if(p_st>= pre.length || p_end >= pre.length || i_st>= in.length || i_end>=in.length)return null;
        if(p_st>p_end || i_st > i_end)return null;
        if(p_st == p_end)return (new TreeNode(pre[p_st]));
        if(i_st == i_end)return (new TreeNode(in[i_st]));
        
        int val = pre[p_st];
        TreeNode root = new TreeNode(val);
        
        int idx = getIndex(val);
        int len_r = i_end - idx;
        
        root.left = BT(p_st+1, p_end - len_r, i_st, idx-1);
        root.right = BT(p_end-len_r+1, p_end, idx+1, i_end);
        
        return root;
        
    }

}
