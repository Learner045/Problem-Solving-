class Solution {
    
    Map<Integer, List<Integer>> map;
    boolean checked[];
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        map = new HashMap<>();
        checked = new boolean[numCourses];
    //   visit = new HashSet<>();
   
        for(int[] arr: prerequisites){
            if(map.containsKey(arr[0])){
                List<Integer> list = map.get(arr[0]);
                list.add(arr[1]);
                map.put(arr[0], list);
               
            }else{
                List<Integer> list = new ArrayList<>();
                list.add(arr[1]);
                map.put(arr[0], list);
                
            }
               
        }
        
        
     //   System.out.println(map.toString());
        boolean visited[] = new boolean[numCourses];
        
        for(int i=0; i<numCourses; i++){
          //  if(!map.containsKey(i))continue;
         //  if(visit.contains(i))continue;
            boolean result = hasCycle(i, visited);
            if(result)return false;
        }
        
        return true;
    }
    
    public boolean solve(int curr, boolean[] visited){
    
        if(checked[curr])return false;//this node is already checked for cycle
        
        if(visited[curr]){ //we visited this node in the path and we got it again so has to be a cycle
          //  System.out.println("visited contains "+curr);
            return true;
        }
        
     //   visit.add(curr);
       
        if(!map.containsKey(curr))return false; //no course, no cycle
        
        visited[curr] = true;
       // System.out.println("visiting "+curr);
        boolean ret = false;
        for(int neighbor: map.get(curr)){
            ret = solve(neighbor, visited);
            if(ret)break;
        }
      //  System.out.println("removing "+curr);
        visited[curr] = false;
        checked[curr] = true; //we visited all child nodes from this node and no cycle, we chekced this node for a cycle so marking ti true
        return ret;
    }

    
}
