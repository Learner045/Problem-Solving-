/*
Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
Output: [[2,4],[1,3],[2,4],[1,3]]
*/

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    
    Map<Node, Node> map;
    public Node cloneGraph(Node node) {
        if(node == null)return null;
        map = new HashMap<>(); //orig - clone
        Node cloneG = cloneGraphNodes(node);
        return cloneG;
    }
    
    public Node cloneGraphNodes(Node node){
        if(map.containsKey(node))return map.get(node);
        
        Node clone = new Node(node.val);
        map.put(node, clone);
        for(Node nei: node.neighbors){
            clone.neighbors.add(cloneGraphNodes(nei));
        }
        return clone;
    }
    
}
