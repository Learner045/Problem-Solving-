class Solution {
    
    Map<Integer, List<Integer>> map = new HashMap<>();
    public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {
        if(n == 1){
            if(edges.length == 0 && source == destination)return true;
        }
        
        for(int [] sub: edges){
            int node1 = sub[0];
            int node2 = sub[1];
          //  if(node1 == node2)return false;
            if(!map.containsKey(node1)){
                map.put(node1, new ArrayList<>());
            }
            
            map.get(node1).add(node2);
        }
        
        
        if(!map.containsKey(source))return false;
        if(map.containsKey(destination))return false; //destination has outgoing edge
        
        
        boolean[] visited = new boolean[n];
        if(canReachDest(source, destination, visited))return true;
            
    
        return false;
        
    }
    
    public boolean canReachDest(int source, int des, boolean[] visited){
        
        if(source == des)return true;
        
        if(!map.containsKey(source))return false; //cannot connect to des as no outgoing path
        
        visited[source] = true;
        for(int node: map.get(source)){
            
            if(visited[node] || !canReachDest(node, des, visited)){
                return false;
            }
        }
        visited[source] = false;
        return true;
    }
}
