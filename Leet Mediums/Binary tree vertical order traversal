/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    Map<Integer, List<Integer>> map;//index, nodes values
    
    public List<List<Integer>> verticalOrder(TreeNode root) {
        map = new HashMap<>();
        List<List<Integer>> result = new ArrayList<>();
        if(root == null)return result;
        
        
        getNodes(root, 0);
        
        List<Integer> keys = new ArrayList<>(map.keySet());
        Collections.sort(keys);
        
        for(int key: keys){
            result.add(map.get(key));
        }
        
        return result;
        
        
    }
    
    public void getNodes(TreeNode root, int index){
        if(root == null)return;
        
        Queue<Pair<TreeNode, Integer>> queue = new LinkedList<>();
        queue.add(new Pair<>(root, index));
        
        while(!queue.isEmpty()){
            int sz = queue.size();
            
            for(int i=0; i<sz; i++){
                
            Pair<TreeNode, Integer> p = queue.remove();
            
            TreeNode node = p.getKey();
            int idx = p.getValue();
            
            if(map.containsKey(p.getValue())){
                map.get(p.getValue()).add(p.getKey().val);
            }else{
                map.computeIfAbsent(p.getValue(), x->new ArrayList<>()).add(p.getKey().val);
            }
            
            if(node.left!=null){
                queue.add(new Pair<>(node.left, idx-1));
            }
            
            if(node.right!=null){
                queue.add(new Pair<>(node.right, idx+1));
            }
                
            }//end of for
        }
    }
}
