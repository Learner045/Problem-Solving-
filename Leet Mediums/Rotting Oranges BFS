class Solution {
    
    int[][] grid;
    public int orangesRotting(int[][] grid) {
        this.grid = grid;
        //BFS alog
        
        
        Queue<int[]> queue = new LinkedList<>();
        
        //right, down, left, top
        int dir_x[] = new int[]{1, 0, -1, 0};
        int dir_y[] = new int[]{0, 1, 0, -1};
        
        int m = grid.length;
        int n = grid[0].length;
        
        int rotten = 2;
        int marked = 3;
        
        //adding all rottens
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == rotten){
                    queue.add(new int[] {i,j});
                }
            }
        }
        
        queue.add(null);//marker
        int level = 0;//levels reached in bfs, our result
        
        
        if(queue.isEmpty())return -1;//no rotten apple found
        
        while(!queue.isEmpty()){
            
            int[] orange = queue.remove();
            
            if(orange == null){
                
                if(!queue.isEmpty()){
                    level++;
                    queue.add(null);
                }
                continue;
            }
            
            for(int i=0; i<dir_x.length; i++){
                int newRow = orange[0]+dir_x[i];
                int newCol = orange[1]+dir_y[i];
                
                if(isValid(newRow, newCol)){
                    queue.add(new int[]{newRow, newCol});
                    grid[newRow][newCol] = 3; //mark a visited
                }
            } 
            
          //  grid[orange[0]][orange[1]] = 3;
            
        }//end of queue
        
        
        //check if all rooten
        for(int i=0; i<m; i++){
            System.out.println(Arrays.toString(grid[i]));
            for(int j=0; j<n; j++){
                
                if(grid[i][j] == 1){
                    return -1;
                }
            }
        }
        
        return level; 
    }
    
    public boolean isValid(int r, int c){
        if(r<0 || c<0 || r>=grid.length || c>=grid[0].length)return false;
        
        if(grid[r][c] == 3)return false; //already visited
        if(grid[r][c] == 0)return false; //blank cell
         if(grid[r][c] == 2)return false; //we have already added it in our first grid iteration
        return true;
        
    }
    
    
}
