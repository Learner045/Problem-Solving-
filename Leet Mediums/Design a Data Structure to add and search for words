class WordDictionary {

    class Node{
        Node children[];
        char c;
        boolean isLeaf;
        public Node(char c){
            this.c = c;
            this.children = new Node[26];
            isLeaf = false;
        }
        public void addchild(char c){
            children[c-'a'] = new Node(c);
        }
        public Node getChild(int index){
            return children[index];
        }  
    }
    
    Node root;
    public WordDictionary() {
        root = new Node('x');
    }
    
    //O(wordlen)
    public void addWord(String word) {
        
        Node head = root;
        for(char c: word.toCharArray()){
            if(head.getChild(c-'a')==null){
                head.addchild(c); 
            }  
            head = head.getChild(c-'a');
        }
        
        head.isLeaf = true;
    }
    
    public boolean search(String word) {
        
      return searchWord(word, 0, root);
    }
    
    public boolean searchWord(String word, int index, Node head){
        if(index == word.length() && head.isLeaf)return true;
        else if(index == word.length())return false;
        
        if(head == null)return false;
        
        
        char c = word.charAt(index);
        if(c=='.'){
            for(int i=0; i<26; i++){
                if(head.getChild(i)!=null){
                    if(searchWord(word,index+1,head.getChild(i))){
                        return true;
                    }
                }   
            } 
            return false;
        }else{
            if(head.getChild(c-'a')!=null)return searchWord(word, index+1, head.getChild(c-'a'));
            return false;
        }
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
