class BoundedBlockingQueue {

    int size;
    Queue<Integer> queue;
    public BoundedBlockingQueue(int capacity) {
        this.size = capacity;
        this.queue = new LinkedList<>();
    }
    
    public void enqueue(int element) throws InterruptedException {
        synchronized(queue){
            while(queue.size()>= size){
                queue.wait();  
            }
            queue.add(element);
            queue.notifyAll();
        }
    }
    
    public int dequeue() throws InterruptedException {
        int el;
         synchronized(queue){
            while(queue.isEmpty()){
                queue.wait();  
            }
           el= queue.poll();
           queue.notifyAll();
        }
        return el;
    }
    
    public int size() {
        return queue.size();
    }
}
