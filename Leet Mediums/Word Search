class Solution {
    int n;
    int m;
    boolean found = false;
    int[] direc_x;
    int[] direc_y;
    public boolean exist(char[][] board, String word) {
        n = board.length;
        m = board[0].length;
        
        //up right down left
        direc_x = new int[]{0,1,0,-1};
        direc_y = new int[]{-1,0,1,0};
        
        for(int row = 0; row<n; row++)
            for(int col = 0; col<m; col++){
                if(found)return true;
                else if(word.startsWith((board[row][col]+""))){
                    found = findWord(board,word,row,col,0);
                }
            }
               
        
        return found?true:false;
    }
    
    public boolean findWord(char[][] board, String word, int row, int col, int index){
        
        if(index>=word.length())return true;
    
        if(row<0 || row>=n)return false;
        if(col<0 || col>=m)return false;
        
        if(board[row][col]!=word.charAt(index))return false;
            
        boolean f =false;
       
        board[row][col] = '0';//mark current path as visited
        
        for(int i=0; i<direc_x.length; i++){
            f = findWord(board, word, row+direc_x[i],col+direc_y[i],index+1);
            if(f)break;
        }
        
        board[row][col] = word.charAt(index);
        return f;
    }
}
