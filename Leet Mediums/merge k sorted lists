/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    
    public ListNode mergeKLists(ListNode[] lists) {
        
       ListNode marker = new ListNode();
  
       ListNode head = marker;

       ListNode min = new ListNode(Integer.MAX_VALUE);
        
       boolean todo = false;
       
       while(true){
           
         todo = false;  
         min = new ListNode(Integer.MAX_VALUE); //min node
         int min_i = -1; //min index
           
       for(int i=0; i<lists.length; i++){
           
           ListNode curr = lists[i];
           
           if(curr!=null && curr.val<min.val){
                todo = true;
                min = curr;
                min_i = i;
           }
           
        }
           if(min_i == -1)break; //no node found
           
           marker.next = min;
           marker = min;

           lists[min_i] = lists[min_i].next;
           
           if(!todo)break;
       }
        
        return head.next;
        
    }
    
}
