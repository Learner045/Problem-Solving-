/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    ListNode head;
    Random rand;
    public Solution(ListNode head) {
        this.head = head;
        rand = new Random();
    }
    
    /** Returns a random node's value. */
    public int getRandom() {
        //Reservoir sampling method 
        ListNode curr = head;
        int count = 0;
        int el = 0; //we have 1 slot for our reservoir
        
        while(curr!=null){
            count++; 
            if(rand.nextInt(count) == 0){ //if random index chosen is 0, out of all indexes, we replace val in our reservoir slot
               el = curr.val; 
            }
            curr = curr.next;
        }
        
        return el;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(head);
 * int param_1 = obj.getRandom();
 */
