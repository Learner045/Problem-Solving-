/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int largestBSTSubtree(TreeNode root) {
        return BST(root)[0];
    }
    
    public int[] BST(TreeNode root){
        if(root == null)return new int[]{0,0, Integer.MAX_VALUE, Integer.MIN_VALUE};
        
        int[] left = BST(root.left);
        int[] right = BST(root.right);
        
        //we compare our root with max val from left sub tree
        if(root.val <= left[3])return new int[]{Math.max(left[0], right[0]), 0, Integer.MIN_VALUE, Integer.MAX_VALUE};
        
        //we compare our root with min val from right subtree
        if(root.val>= right[2])return new int[]{Math.max(left[0], right[0]), 0, Integer.MIN_VALUE, Integer.MAX_VALUE};
        
        
        int currMax = left[1]+right[1]+1; //current max of left+right+1
        
        return new int[]{
            Math.max( currMax, Math.max(left[0], right[0])), //overall max
            currMax, //current max
            Math.min(root.val, (left[2])), //left min
            Math.max(root.val, right[3]) //right max
        };
    }
}
