class Solution {
    
    int[] nums;
    public int findKthLargest(int[] nums, int k) {
        this.nums = nums;
        
        return findCorrectLargest(0, nums.length-1, nums.length-k);
    }
    
    public void swap(int low, int high){
        int temp = nums[low];
        nums[low] = nums[high];
        nums[high] = temp;
    }
    
    public int findCorrectLargest(int low, int high, int k){
        if(low==high)return nums[low];
        
        Random rand = new Random();
        int pivot_idx  = low + (rand.nextInt(high - low));
        int pivot_loc = partition(low, high, pivot_idx);
        if(pivot_loc == k)return nums[k];
        else if(pivot_loc<k)return findCorrectLargest(pivot_loc+1, high, k);
        else return findCorrectLargest(low, pivot_loc-1, k);
    }
    
    public int partition(int low, int high, int pivot_index){
        int pivot = nums[pivot_index];
        swap(pivot_index, high);
        
        int pos = low;
        for(int i=low; i<high; i++){
            if(nums[i]<pivot){
                swap(pos, i);
                pos++;
            }
        }
        
        swap(pos, high);//bring pivot to correct position
        return pos;
    }
}
