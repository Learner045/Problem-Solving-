/*
Input: arr = [1,1,2]
Output: 3
Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].
These yield the results 1, 1, 2, 1, 3, 3.
There are 3 unique values, so the answer is 3.
*/

class Solution {
    public int subarrayBitwiseORs(int[] arr) {
      
        Set<Integer> prev = new HashSet<>();
        Set<Integer> result = new HashSet<>();
        
        //in this approach, we save our ORed values in prev and then when
        //we encounter our new number, we OR it with previous values 
        //save the result in result
        
        //imp thing about this approach is that, as our ORed values repeat, 
        //our prev ORed values substantially reduce in count
        //hence, it does not become an n^2 appraoch
        
        for(int num: arr){
            
            Set<Integer> curr = new HashSet<>();
            curr.add(num);
            
            for(int n: prev)curr.add(n|num);
            
            prev = curr;
            result.addAll(curr);
        }
        
        return result.size();
       
    }
    
    public int bruteForce(int[] arr){
        //n^2
        
         Set<Integer> set = new HashSet<>();
        
        int[] nums = arr;
        
        if(nums.length == 1)return 1;
        
        int curr_or = 0;
        
        for(int i=0; i<nums.length; i++){
            
            if((i+1)<nums.length && nums[i] == nums[i+1])continue;
            curr_or = 0;
            
            for(int j=i; j<nums.length; j++){
               
                if((j+1)<nums.length && nums[j] == nums[j+1])continue;
                
                curr_or |= nums[j];
                
                if(set.contains(curr_or))continue;
                else set.add(curr_or);
            }
        }
        
        
        
        return set.size();
    }
}
