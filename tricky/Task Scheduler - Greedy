class Solution {
    public int leastInterval(char[] tasks, int n) {
        
        //max times occuring task will determine our output
        //total tasks + empty spaces
        
        
        Map<Character, Integer> count = new HashMap<>();
        
        int totalTasks = tasks.length;
        for(char c: tasks){
            count.put(c, count.getOrDefault(c, 0)+1);
        }
        
        //sort tasks acc to the freq in desc
        List<Character> sortedTasks = new ArrayList<>(count.keySet());
        
        Collections.sort(sortedTasks, (a, b)-> Integer.compare(count.get(b), count.get(a)));
        
        //check how many spaces we have initially - if A occurs 6 times, then 15 spaces
        int maxFreq = count.get(sortedTasks.get(0));
        int space = (maxFreq-1)*n;
        
        for(int i=1; i<sortedTasks.size() && space>0; i++){
            space -= Math.min((maxFreq-1), count.get(sortedTasks.get(i)));
        }
        
        space = Math.max(0, space); //spaces remaining after occupying all characters
        
        
        return space+totalTasks;
    }
}
