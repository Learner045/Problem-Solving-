class Solution {
    
    
    class Node{
        char c;
        Node[] children;
        boolean isLeaf;
        public Node(char c){
            this.c = c;
            children = new Node[26];
            isLeaf = false;
        }
        
        public void addChild(int index, Node child){
            this.children[index] = child;
        }
        
        public Node getChild(int index){
            return this.children[index];
        }
        
        
        
    }
    
    Node root;
    Map<String, List<String>> map;
    
    public List<List<String>> suggestedProducts(String[] products, String searchWord) {
        this.root = new Node('r');
        map = new HashMap<>();
        
        List<List<String>> finalres = new ArrayList<>();
        
        createTrie(products);
        
        for(int i=0; i<searchWord.length(); i++){
            map.put(searchWord.substring(0,i+1), new ArrayList<>());
        }
        
        Node curr = root;
        List<String> result = new ArrayList<>();
        
        getProducts(curr, result, new StringBuilder());
        
        //System.out.println(result.toString());
        for(int i=0; i<searchWord.length(); i++){
            List<String> l = map.get(searchWord.substring(0,i+1));
            
            Collections.sort(l);
            
            l = l.stream().limit(3).collect(Collectors.toList());
            
            finalres.add(l);
        }
       
        
        return finalres;
    }
    
    public void createTrie(String[] products){
        Node curr;
        
        for(String product: products){
            
            curr = this.root;
            
            int index = 0;
            
            for(char c: product.toCharArray()){
                index = c-'a';
                
                if(curr.getChild(index)==null){
                   curr.addChild(index, new Node(c));
                }
                
                curr = curr.getChild(index);
            }
            curr.isLeaf = true;
            
        }
        
        
    }
    
   public void getProducts(Node curr, List<String> list, StringBuilder sb)    {   
      
       for(Node child: curr.children){
           if(child!=null){
               getProducts(child, list, sb.append(child.c));
              sb.deleteCharAt(sb.length()-1);
           }
       }
       
       if(curr.isLeaf){
           list.add(sb.toString());
           addToMap(sb.toString());
       }
   }
    
   public void addToMap(String word){
       
       for(int i=0; i<word.length(); i++){
           
           String sub = word.substring(0,i+1);
           
           if(map.containsKey(sub)){
               List<String> intm = map.get(sub);
               intm.add(word);
               map.put(sub, intm);
           }else{
               return;
           }
       }
   }
}


