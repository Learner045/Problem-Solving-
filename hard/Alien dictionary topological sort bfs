/*
Input: words = ["wrt","wrf","er","ett","rftt"]
Output: "wertf"
*/

class Solution {
    public String alienOrder(String[] words) {
        
        //adj list of outgoing nodes
        Map<Character, Set<Character>> adjList = new HashMap<>();
        
        //incoming count
        Map<Character, Integer> incoming = new HashMap<>();
        
        for(String word: words){
            for(char c: word.toCharArray()){
                incoming.put(c, 0);
                adjList.put(c, new HashSet<>());
            }
        }
        
        //find relationships
        for(int i=0; i+1<words.length; i++){
            String word1 = words[i];
            String word2 = words[i+1];
            
            //word 2 is a prefix of word 1 eg. abcd abc
            if(word1.length()>word2.length() && word1.startsWith(word2))return "";
            
            for(int j=0; j<Math.min(word1.length(), word2.length()); j++){
                if(word1.charAt(j)!= word2.charAt(j)){
                    
                    if(!adjList.get(word1.charAt(j)).contains(word2.charAt(j)))
                        incoming.put(word2.charAt(j), incoming.get(word2.charAt(j))+1);
                    
                    adjList.get(word1.charAt(j)).add(word2.charAt(j));
                    
                    break;
                }
            }
        }
        
        //performing bfs
        Queue<Character> queue = new LinkedList<>();
        
        for(Map.Entry<Character, Integer> entry: incoming.entrySet()){
            if(entry.getValue() == 0){
                queue.add(entry.getKey());
                
            }
        }
        
        StringBuilder sb = new StringBuilder();
        
        while(!queue.isEmpty()){
            char c = queue.remove();
            sb.append(c);
            
            for(char next: adjList.get(c)){
                
                incoming.put(next, incoming.get(next)-1);
              //  System.out.println(next+" "+incoming.get(next));
                if(incoming.get(next) <= 0)queue.add(next);
            }
        }
        
        System.out.println(sb.toString());
        
        if(sb.length()<incoming.size())return "";
        
        else return sb.toString();
    }
}
