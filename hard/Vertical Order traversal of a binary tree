/*
Input: root = [1,2,3,4,5,6,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation:
Column -2: Only node 4 is in this column.
Column -1: Only node 2 is in this column.
Column 0: Nodes 1, 5, and 6 are in this column.
          1 is at the top, so it comes first.
          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.
Column 1: Only node 3 is in this column.
Column 2: Only node 7 is in this column.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    class Node{
        int row, col;
        TreeNode n;
        public Node(int row, int col, TreeNode n){
            this.row = row;
            this.col = col;
            this.n = n;
        }
    }
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        
        Map<Integer, List<Node>> map = new HashMap<>(); //col - node
        
        Queue<Node> queue = new LinkedList<>();
        
        //left = (row+1, col-1), right = (row+1, col+1)
        
        queue.add(new Node(0, 0, root));
        
        while(!queue.isEmpty()){
            int size = queue.size();
         //   System.out.println("size: "+size);
            
            for(int i=0; i<size; i++){
                Node curr = queue.remove();
               // System.out.println("processing "+curr.n.val);
                
                if(map.containsKey(curr.col)){
                    map.get(curr.col).add(curr);
                }else{
                    map.put(curr.col, new ArrayList<>());
                    
                    map.get(curr.col).add(curr);
                }
                
                if(curr.n.left!=null){
                    queue.add(new Node(curr.row+1, curr.col-1, curr.n.left));
                    
                
                }
                
                if(curr.n.right!=null){
                    queue.add(new Node(curr.row+1, curr.col+1, curr.n.right));
                }
            }
        }
        
        List<Integer> list = new ArrayList<>(map.keySet());
        Collections.sort(list);
        
        for(int key: list){
            if(map.containsKey(key)){
               
                List<Node> sub = map.get(key);
                Collections.sort(sub, (a,b)->{
                    if(a.row == b.row)return Integer.compare(a.n.val, b.n.val);
                    else return Integer.compare(a.row, b.row);
                    
                });
                
                res.add(new ArrayList<>());
                for(Node x: sub){
                    res.get(res.size()-1).add(x.n.val);
                }
                
               // System.out.println();
            }
        }
        
        return res;
        
    }
}
