/*
Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
Output: 120
Explanation: The subset chosen is the first and fourth job. 
Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70.
*/

class Solution {
    
    class Job{
        int start;
        int end;
        int profit;
        public Job(int start, int end, int profit){
            this.start = start;
            this.end = end;
            this.profit = profit;
        }
    }
    
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        
        //list of jobs
        int len = startTime.length;
        
        List<Job> list = new ArrayList<>();
        
        for(int i=0; i<len; i++){
            list.add(new Job(startTime[i], endTime[i], profit[i]));
        }
        
        Collections.sort(list, (a,b)->Integer.compare(a.start, b.start));
        
        int[] memo = new int[len];
        Arrays.fill(memo, -1);
        
        return findMaxProfit(memo, 0, list);
        
        
    }
    
    public int findMaxProfit(int[] memo, int index, List<Job> jobs){
        if(index<0)return 0;
        
        if(index>=jobs.size())return 0;
        
        if(memo[index]!=-1)return memo[index];
        
        int maxProfit = 0;
        
        //either take the job or don't take the job
        //if take the job, next job should not be conflicting/overlapping
        
        int takeProfit = jobs.get(index).profit + findMaxProfit(memo, findNextJob(jobs.get(index).end, index+1, jobs), jobs);
        
        int dontTake = findMaxProfit(memo, index+1, jobs);
        
        maxProfit =  Math.max(takeProfit, dontTake);
        
        memo[index] = maxProfit;
        return maxProfit;
    }
    
    public int findNextJob(int end, int low, List<Job> jobs){
        //given endTime and nextindex
        int high = jobs.size()-1;
        int resIndex = -1;
        
        while(low<=high){
            int mid =(low)+(high-low)/2;
            
            if(jobs.get(mid).start>=end){
                resIndex = mid;
                high = mid-1;
            }else{
                low = mid+1;
            }
        }
        
        return resIndex;
    }
    
    
}
