/*
Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    int index = 0;
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null)return "";
        
        StringBuilder sb = new StringBuilder();
        inorder(root, sb);
      //  System.out.println(sb.toString());
        return sb.toString();
    }
    
    public void inorder(TreeNode root, StringBuilder sb){
        if(root == null)sb.append("null.");
        if(root == null)return;
        
        sb.append(root.val+".");
        
        
        inorder(root.left, sb);
       
        inorder(root.right, sb);
        
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.equals(""))return null;
        data = data.substring(0, data.length()-1);
       
        String d[] = data.split("[.]");
      //   System.out.println(Arrays.toString(d));
        return des(d);
        
    }
    
    public TreeNode des(String data[]){
        System.out.println(index);
        
        if(data[index].equals("null"))return null;
        
        TreeNode node = new TreeNode(Integer.parseInt(data[index]));
       
        ++index;
        node.left = des(data);
        
        ++index;
        node.right = des(data);
        
        return node;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
