/*
Input: array = [1,2,3,4,5,3,1], target = 3
Output: 2
Explanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.
*/

/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
    int tgt;
    int len;
    MountainArray arr;
    
    public int findInMountainArray(int target, MountainArray mountainArr) {
        this.tgt = target;
        this.len = mountainArr.length();
        this.arr = mountainArr;
        
        int peakIndex = findPeak();
        
        int res = binarySearch(0, peakIndex, true);
        if(res!=-1)return res;
        res = binarySearch(peakIndex, len-1, false);
        return res;
    }
    
    public int binarySearch(int low, int high, boolean increasingSlope){
        while(low<=high){
            int mid = low + (high-low)/2;
            
            int val = arr.get(mid);
            if(val == tgt)return mid;
            
            else if(val<tgt){
                if(increasingSlope)low = mid+1;
                else high = mid-1;
            }else{
                if(increasingSlope)high = mid-1;
                else low=mid+1;
            }
        }
        return -1;
    }
    
    public int findPeak(){
        
        int low = 1;
        int high = len-2;
        
        while(low<high){
            int mid = low+(high-low)/2;
            
            int middleVal = arr.get(mid);
            
            if(arr.get(mid+1)>middleVal)low = mid+1;
            else if(arr.get(mid-1)>middleVal)high = mid;
            else return mid; //val itself is peak
        }
        
        return low;
        
    }
}
