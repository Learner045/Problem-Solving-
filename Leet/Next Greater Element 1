/*
Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation:
For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
For number 1 in the first array, the next greater number for it in the second array is 3.
For number 2 in the first array, there is no next greater number for it in the second array, so output -1.
*/


class Solution {
    
    Map<Integer, Integer> indexMap;
    Map<Integer, Integer> nextMax;
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
       return intuitiveApproachStack(nums1, nums2);
        
    }
    
    public int[] intuitiveApproachStack(int[] nums1, int[] nums2){
        nextMax = new HashMap<>();
        
        Stack<Integer> stack = new Stack<>();
        
        for(int i=0; i<nums2.length; i++){
            
            while(!stack.isEmpty() && nums2[i]>stack.peek()){
                nextMax.put(stack.pop(), nums2[i]);
            }
            
            stack.push(nums2[i]);
        }
        
        while(!stack.isEmpty()){
            nextMax.put(stack.pop(), -1);
        }
        
        int[] res = new int[nums1.length];
        
        for(int i=0; i<nums1.length; i++){
            res[i] = nextMax.get(nums1[i]);
        }
        
        return res;
    }
    
    public int[] solveBruteForceOptimized(int[] nums1, int[] nums2){
        indexMap = new HashMap<>();
        
        for(int i=0; i<nums2.length; i++){
            indexMap.put(nums2[i], i);
        }
        
        int[] result = new int[nums1.length];
        for(int i=0; i<nums1.length; i++){
            int index = indexMap.get(nums1[i]);
            int res = -1;
            for(int j=index+1; j<nums2.length; j++){
                if(nums2[j]>nums1[i]){
                    res = nums2[j];
                    break;
                }
            }
            result[i] = res;
        }
        
        return result;
    }
    
    
    
}
