/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root == null)return null;;
        
        /*
        
        TreeNode left = invertTree(root.left);
        TreeNode right = invertTree(root.right);
        
        TreeNode temp = left;
        root.left = root.right;
        root.right = temp;
        
        return root;
        */
        
        return iterative(root);
    }
    
    
    public TreeNode iterative(TreeNode root){
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        
        while(!queue.isEmpty()){
            int size = queue.size();
            
            
            for(int i=0; i<size; i++){
                TreeNode node = queue.remove();
                
                TreeNode left = node.left;
                TreeNode right = node.right;
                
                TreeNode temp = node.left;
                node.left = node.right;
                node.right = temp;
                
              
                if(left!=null){
                    queue.add(left);
                }
                
                if(right!=null){
                    queue.add(right);
                }
            }
        }
        
        return root;
    }
}
